// lesshint universalSelector: { enabled: false }

// Mixins go here

.Flip {
    z-index: 1;
    perspective: 1000px;
    transform-style: preserve-3d;

    .flipper {
        width: 100%;
        height: 100%;
        transition: 0.5s;
        transform-style: preserve-3d;

        position: relative;
    }

    &:hover &-back,
    .flip &-back {
		transform: rotateY(0deg);
    }

    &:hover &-front,
    .flip &-front {
	    transform: rotateY(180deg);
	}

    &-back,
    &-front {
        backface-visibility: hidden;
        display: block;
        position: absolute;
        width: 100%;
        height: 100%;
        top: 0px;
        left: 0px;
        transition: 0.5s;
        transform-style: preserve-3d;
    }

    &-back {
        transform: rotateY(-180deg);
    }

    &-front {
        z-index: 2;
	    transform: rotateY(0deg);
    }
}

// hide content from anything other than screen readers
.sr-only {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  border: 0;
}

.Contain () {
    margin: 0 auto;
    max-width: 1240px;
    padding: 0;
    width: 100%;
}

.LinearGradient () {
    background-image: linear-gradient(359deg, #fff 60%, #e3dedb 90%);
}

.LinearGradient-Partial () {
    width: 100%;
    height: auto;
    background: linear-gradient(to top, #fff 10px, #e3dedb 85%, #fff 100px);
    background-size: 100% 400px;
    background-repeat: no-repeat;
}

.hover-state {
    text-decoration: none;
    color: @color-primaryText;
}

.active-state {
    font-weight: bold;
}

.PageHeading () {
    .PageTitle;
    max-width: 1240px;
    margin: 0 auto;
    text-align: center;
    padding: 40px 20px 20px 20px;

    @media @mq-viewport-lg {
        padding: 80px 20px 30px 20px;
    }

    [data-mood-bold] & {
        letter-spacing: normal;

        @media @mq-viewport-lg {
            padding: 80px 0 100px 0;
            letter-spacing: normal;
        }
    }
}

.BoxShadow () {
    box-shadow: 0 10px 20px 0 rgba(0, 0, 0, 0.06);

    [data-hide-promo-dropshadow] & {
        box-shadow: none;
    }
}

.Button-Pulse (@text-color: white,
               @bkd-color: @color-primary,
               @border-width: 0,
               @border-color:
               @color-primary) {
    a, span {
        .Label(@text-color);
        font-size: 12px;
        background-color: @bkd-color;
        padding: 15px 20px;
        margin: 0 auto;
        border: @border-width solid @border-color;
        text-decoration: none;
        transition: all 250ms cubic-bezier(0.4, 0.0, 0.2, 1);
        text-transform: uppercase;
        -webkit-font-smoothing: antialiased;

        &:hover {
            transform: scale(1.05);
            text-decoration: none;
        }

        // override .Label mq
        @media @mq-viewport-md {
            font-size: 12px;
        }
    }
}

.Button-Pagination () {
    margin: 30px auto;
    text-align: center;

    .Button-Pulse(@color-primary, @color-white, 1px);

    a {
        margin: 0 auto 10px auto;
        min-width: 140px;
        display: inline-block;
    }

    @media @mq-viewport-md {
        margin: 30px auto 0 auto;

        a {
            margin: 0 10px;
        }
    }
}

.Navigation-Section () {
    max-width: 800px;
    margin: 0 auto 30px auto;

    .Navigation {
        display: block;
        background-color: transparent;
        text-align: center;
        top: 20px;

        &-items {
            margin: 0;
            padding: 0;
        }

        .NavigationItem {
            padding: 0;

            &-text,
            &-text-link {
              .PhotoCreditText;
                color: @color-primary;
                font-weight: bold;
                text-align: center;
                text-transform: uppercase;
                letter-spacing: 1px;
                height: 16px;
            }
        }
    }

    @media @mq-viewport-lg {
        .Navigation {
            top: 0;
        }
    }
}

.ArticleBody () {
    .BodyText();
    margin: 20px 0;

    a {
        &:hover {
            text-decoration: underline;
        }
    }

    span.Enhancement-item {
        margin: 0;
    }

    @media @mq-viewport-md {
        [data-noLead] & {
            margin: 30px 0;
        }

        .Enhancement {
            &[data-align-center] {
                .Enhancement-item > * {
                    float: none;
                    margin: 0 auto;
                }
            }

            &[data-align-right] {
                .Enhancement-item > * {
                    float: right;
                    margin: 40px 0 40px 40px;
                }
            }

            &[data-align-left] {
                .Enhancement-item > * {
                    float: left;
                    margin: 40px 40px 40px 0;
                }
            }
        }
    }

    @media @mq-viewport-lg {
        [data-noLead] & {
            margin: 40px 0;
        }
    }

    .SolidButton {
        a {
            margin: 0;
        }
    }

    .Enhancement {
        width: 100%;
        margin: 20px 0;

        @media @mq-viewport-md {
            margin: 40px 0;
        }

        &-item {
            margin: 0 -20px;

            @media @mq-viewport-md {
                margin: 0;
            }
        }

        img {
            width: 100%;
            height: auto;
        }

        .QuoteCard {
            max-width: none;
            padding: 45px 30px;
            margin: 20px;
            min-height: 1px;

            @media @mq-viewport-md {
                padding: 60px 40px;
            }

            &[data-align-center] {
                @media @mq-viewport-md {
                    margin: 0 auto;
                    max-width: 300px;
                }
            }

            &[data-align-right] {
                @media @mq-viewport-md {
                    float: right;
                    margin: 0 0 40px 40px;
                    max-width: 300px;
                }
            }

            &[data-align-left] {
                @media @mq-viewport-md {
                    float: left;
                    margin: 0 40px 40px 0;
                    max-width: 300px;
                }
            }

            blockquote {
                font-size: 21px;
                line-height: 1.24;
            }
        }

        .FacebookEmbed,
        .FacebookUrl,
        .InstagramEmbed,
        .InstagramUrl,
        .TweetEmbed,
        .TweetUrl {
            margin: 0 20px;
            text-align: center;
            display: flex;
            justify-content: center;

            & > * {
                margin: 0 auto;
                max-width: 100%;
                min-width: auto;
            }
        }

    }
}

 /** IE and Edge do not fully support the W3C CSS grid specfication (e.g. it does not
  * support gutters or auto-placement). This is a fallback to creating columns
  * with floats. It generates the width of the columns based on the css var
  * gridGutters, which can be set at the CMS theme level. It then zeroes out
  * these style rules for the browsers that do support grid.
  *
  * This mixin should be removed once MS browsers are fully supporting CSS grid.
  *
  * @param {number} @numberOfColumns Specifies the number of columns this mixin
  *  will generate
  */
.msFauxGrid (@numberOfColumns: 2) {
    @columnFraction: (100 / @numberOfColumns) * 1%; // 1% coerces this to a percentage
    @numberOfGridGutters: @numberOfColumns - 1;

    float: left;
    width: ~'calc(@{columnFraction} - ((var(--gridGutters) * @{numberOfGridGutters}) / @{numberOfColumns}))'; // lesshint maxCharPerLine: false
    margin-right: var(--gridGutters);
    box-sizing: border-box;

    &:nth-child(@{numberOfColumns}n) {
        margin-right: 0;
    }

    @supports (display: grid) {
        float: none;
        margin-bottom: 0;
        width: auto;
        margin-right: 0;
        display: flex;
        padding-bottom: 20px;
    }
}

/**
 * This provides 1 spot to perform basic calculations for creating
 * grids using the css variables from the theme variables. It also
 * provides the ability to rotate the module vertically based on a
 * passed in breakpoint.
 *
 * You must ensure the grid columns/rows are marked with the attribute
 * `data-grid-item`. Also make sure that your grid column and row gaps
 * are based off of the `var(--gridGutters)` css variable as this is
 * set at the theme level. All numbers should be a derivative off of the
 * base number set up in the original mocks. For example, if the
 * base gutter is 20px and the grid you are creating deviates to 40px,
 * then you will want to provide a calculation of 20px * 2 as seen below.
 * (~'calc(var(--gridGutters) * 2)'
 * Substituting the css var for the base gutter size ensure that it will
 * scale appropriately if the gutters are changed by the theme. They will
 * change in proportion to the design's original vision.
 *
 * @param gridColumnTemplate The definition of the columns for the grid
 * @param gridRowTemplate The definition of the columns for the grid
 * @param gridRowGap The gutter spacing for rows
 * @param gridColumnGap The gutter spacing for the columns
 * @param responsiveRotate True if the grid should rotate on a break point
 * @param breakPointToRotate The breakpoint at which the grid should rotate
 * @param isLastFlex Whether the last column should be flex based, which is
 *        common in many of our modules
 * @example
 * A 3 column grid with equal spacing and 20px gutters that rotates at tablet
 * breakpoint would look something like below. We will use the css gridGutters
 * css var because this is controlled by that theme variable and the default is
 * 20px.
 *
 * [data-grid] {
 *   .Grid (@gridColumnTemplate: 1fr 1fr 1fr,
 *      @gridColumnGap: var(--gridGutters),
 *      @breakPointToRotate: @mq-viewport-lg,
 *      @isLastFlex: false)
 *   }
 */

.Grid (@gridColumnTemplate: 1fr 1fr, @gridRowTemplate: 1fr, @gridRowGap: ~'calc(var(--gridGutters) / 2)', @gridColumnGap: var(--gridGutters), @responsiveRotate: true, @breakPointToRotate: @mq-viewport-md, @isLastFlex: true) { // lesshint maxCharPerLine: false

    display: grid;

    & when (@responsiveRotate = true) {
        grid-template-rows: @gridRowTemplate;
        grid-column-gap: 0;
        grid-row-gap: @gridRowGap;
        width: @module-spacing-mobile;
        margin: 0 auto;

        [data-grid-item] {
            box-sizing: border-box;
        }

        & when (@isLastFlex = true) {
            [data-grid-item]:last-child {
                display: flex;
                flex-direction: column;
                justify-content: flex-start;
            }
        }

        @media @breakPointToRotate {
            grid-template-rows: @gridRowTemplate;
            grid-template-columns: @gridColumnTemplate;
            grid-column-gap: @gridColumnGap;
            grid-row-gap: 0;
            width: var(--pageWidth);
            max-width: var(--maxPageWidth);
            justify-content: center;

            [data-grid-item]:last-child {
                justify-content: center;
            }
        }
    }
}

/**
 * This provides 1 spot to ensure font sizing and line heights
 * are set up in away that allows for theme variables to modify the base font
 * size as well as set relative line heights so that the line heights change
 * accordingly with font size changes. It also does the calculation from pixel
 * to REM to ensure the fonts can scale.
 *
 * @param {number} fontSize The pixel font size from the mock (without the px suffix)
 * @param {number} contentWidth The cotent width in pixels for the area this font size
                   covers (without the px suffix)
 *
 * Note: If you don't need to set the font-size (perhaps it was set somewhere else)
 * then you can use the `getLineHeight` method below instead to get the correct line
 * height for that particular content area.
 *
 * @example:
 * The mock for the article desktop width has the font size at 16px and the content width
 * at 800px. The ideal line height would then be 27px, which translates to 1.69.
 * &-body {
 *  .getTypography (16, 800);
 * }
 * compiles to:
 * .Article-body {
 *  font-size: 1rem;
 *  line-height: 1.69
 * }
 */
.getTypography (@fontSize, @contentWidth) {
    .getLineHeight(@fontSize, @contentWidth);
    @whitename: 'font-size-@{fontSize}';
    @white: @@whitename;
    font-size: @white;
}

/**
 * In order for the font-sizes to change, the line heights must also change
 * accordingly or else the text will look bad and the line heights should be
 * relative (unit-less) and not unit-based. The most appropriate line height
 * is based off the golden ratio using a formula that includes the content
 * width and the font-size. This also follows the specs of the mocks.
 *
 * @param fontSize The font size from the mock
 * @param contentWidth The content width from the mock
 */
.getLineHeight(@fontSize, @contentWidth) {
    @width-ratio : @contentWidth / pow(@fontSize * @phi, 2);
    @one-minus-width-ratio : 1 - @width-ratio;
    @height-factor : @phi - (@one-over-two-phi * @one-minus-width-ratio);
    line-height: (round(@height-factor * @fontSize) - 1) / @fontSize;
}

// Inverse Colors for Darker Backgrounds
.InverseList() {
  &-title,
  &-items-item,
  &-description {
    [data-inverse-colors] & {
      color: @color-white;
    }
  }

  &-title {
    a:hover {
      color: @color-primary;
    }
  }

  &[data-inverse-colors] {
    .slick-prev:before,
    .slick-next:before {
      content: url('/styleguide/media/carousel-arrow-white.svg');
    }
  }

  &-cta .Link {
    [data-inverse-colors] & {
      color: @color-white;
      border: 1px solid @color-white;
    }
  }

  &-cta .Link:hover {
    [data-inverse-colors] & {
      background-color: @color-white;
      color: @color-primary;
    }
  }
}

//Tag button
.TagButton() {
  &:extend(.SolidButton a all);
  background-color: @color-white;
  color: @color-primary;
  font-size: 11px;
  font-weight: 700;
  border: 1px solid @color-tan;
  padding: 9px 15px;
  margin: 0 10px 10px 0;
}
