package brightspot.core.tool;

import java.io.StringWriter;
import java.util.Comparator;
import java.util.List;
import java.util.Objects;
import java.util.Set;
import java.util.stream.Collectors;
import javax.servlet.jsp.PageContext;

import com.psddev.cms.tool.ToolPageContext;
import com.psddev.dari.db.Modification;
import com.psddev.dari.db.Recordable;
import com.psddev.dari.db.State;
import com.psddev.dari.util.ClassFinder;
import com.psddev.dari.util.ObjectUtils;
import com.psddev.dari.util.Stats;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Global modification for the purpose of providing a global bean hook into HTML blocks generated by {@link EditTopHtml}
 * implementations. The HTML generation is determined at invocation time by each concrete implementation.
 */
@Recordable.BeanProperty("editTopContainer")
public class EditTopHtmlContainerModification extends Modification<Object> {

    public static final String INTERNAL_NAME = "brightspot.core.tool.EditTopHtmlContainerModification";

    private static final Logger LOGGER = LoggerFactory.getLogger(EditTopHtmlContainerModification.class);

    private static final Stats STATS = new Stats("Edit Top HTML Blocks");

    public String getContainerHtml(PageContext pageContext) {

        ToolPageContext page = new ToolPageContext(pageContext);

        Object original = getOriginalObject();

        StringWriter writer = new StringWriter();
        page.setDelegate(writer);

        Set<Class<? extends EditTopHtml>> htmlBlockClasses = ClassFinder.findConcreteClasses(EditTopHtml.class);
        if (htmlBlockClasses.isEmpty()) {
            return "";
        }

        List<EditTopHtml> sortedHtmlBlocks =
            htmlBlockClasses.stream()
                .map(c -> {
                    try {
                        return c.newInstance();
                    } catch (InstantiationException | IllegalAccessException e) {
                        LOGGER.warn("Failed to instantiate " + c.getName(), e);
                        return null;
                    }
                })
                .filter(Objects::nonNull)
                .filter(e -> e.isSupported(original))
                .sorted(Comparator.comparing(EditTopHtml::getPriority, Comparator.reverseOrder()))
                .collect(Collectors.toList());

        for (EditTopHtml editTopHtml : sortedHtmlBlocks) {

            Stats.Timer timer = STATS.startTimer();

            try {

                editTopHtml.writeHtml(original, page);
                timer.stop(editTopHtml.getClass().getName());

            } catch (Exception e) {
                LOGGER.warn("Failed write EditTopHtml [" + editTopHtml.getClass().getName() + "] for object id=" + State
                    .getInstance(original)
                    .getId()
                    .toString(), e);
                timer.stop("Failed write EditTopHtml " + "[" + editTopHtml.getClass().getName() + "]");
            }
        }

        String html = writer.toString();

        return ObjectUtils.isBlank(html) ? "" : html;
    }
}
